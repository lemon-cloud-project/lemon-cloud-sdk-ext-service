// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package sdk_ext_service

import (
	context "context"
	sdk_ext_model "github.com/lemon-cloud-project/lemon-cloud-sdk-ext-service/sdk_ext_model"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FoundationServiceClient is the client API for FoundationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FoundationServiceClient interface {
	Register(ctx context.Context, in *sdk_ext_model.ExtInfo, opts ...grpc.CallOption) (FoundationService_RegisterClient, error)
}

type foundationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFoundationServiceClient(cc grpc.ClientConnInterface) FoundationServiceClient {
	return &foundationServiceClient{cc}
}

func (c *foundationServiceClient) Register(ctx context.Context, in *sdk_ext_model.ExtInfo, opts ...grpc.CallOption) (FoundationService_RegisterClient, error) {
	stream, err := c.cc.NewStream(ctx, &FoundationService_ServiceDesc.Streams[0], "/service.FoundationService/Register", opts...)
	if err != nil {
		return nil, err
	}
	x := &foundationServiceRegisterClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FoundationService_RegisterClient interface {
	Recv() (*sdk_ext_model.ExtInfo, error)
	grpc.ClientStream
}

type foundationServiceRegisterClient struct {
	grpc.ClientStream
}

func (x *foundationServiceRegisterClient) Recv() (*sdk_ext_model.ExtInfo, error) {
	m := new(sdk_ext_model.ExtInfo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FoundationServiceServer is the server API for FoundationService service.
// All implementations must embed UnimplementedFoundationServiceServer
// for forward compatibility
type FoundationServiceServer interface {
	Register(*sdk_ext_model.ExtInfo, FoundationService_RegisterServer) error
	mustEmbedUnimplementedFoundationServiceServer()
}

// UnimplementedFoundationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFoundationServiceServer struct {
}

func (UnimplementedFoundationServiceServer) Register(*sdk_ext_model.ExtInfo, FoundationService_RegisterServer) error {
	return status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedFoundationServiceServer) mustEmbedUnimplementedFoundationServiceServer() {}

// UnsafeFoundationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FoundationServiceServer will
// result in compilation errors.
type UnsafeFoundationServiceServer interface {
	mustEmbedUnimplementedFoundationServiceServer()
}

func RegisterFoundationServiceServer(s grpc.ServiceRegistrar, srv FoundationServiceServer) {
	s.RegisterService(&FoundationService_ServiceDesc, srv)
}

func _FoundationService_Register_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(sdk_ext_model.ExtInfo)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FoundationServiceServer).Register(m, &foundationServiceRegisterServer{stream})
}

type FoundationService_RegisterServer interface {
	Send(*sdk_ext_model.ExtInfo) error
	grpc.ServerStream
}

type foundationServiceRegisterServer struct {
	grpc.ServerStream
}

func (x *foundationServiceRegisterServer) Send(m *sdk_ext_model.ExtInfo) error {
	return x.ServerStream.SendMsg(m)
}

// FoundationService_ServiceDesc is the grpc.ServiceDesc for FoundationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FoundationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.FoundationService",
	HandlerType: (*FoundationServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Register",
			Handler:       _FoundationService_Register_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "grpc_def/service/foundation.proto",
}
